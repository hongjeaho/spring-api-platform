/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JStore;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JUserRole.UserRolePath;
import org.jooq.generated.tables.JUserRoleMapping.UserRoleMappingPath;
import org.jooq.generated.tables.records.UserRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JUser extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>store.user</code>
     */
    public static final JUser USER = new JUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>store.user.seq</code>. 사용자 일련번호
     */
    public final TableField<UserRecord, Long> SEQ = createField(DSL.name("seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "사용자 일련번호");

    /**
     * The column <code>store.user.email</code>. 사용자 이메일
     */
    public final TableField<UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100).nullable(false), this, "사용자 이메일");

    /**
     * The column <code>store.user.name</code>. 사용자명
     */
    public final TableField<UserRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(30).nullable(false), this, "사용자명");

    /**
     * The column <code>store.user.id</code>. 사용자 아이디
     */
    public final TableField<UserRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(30).nullable(false), this, "사용자 아이디");

    /**
     * The column <code>store.user.password</code>. 비밀번호
     */
    public final TableField<UserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "비밀번호");

    /**
     * The column <code>store.user.created_by</code>. 생성자
     */
    public final TableField<UserRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.nullable(false), this, "생성자");

    /**
     * The column <code>store.user.created_time</code>. 생성일
     */
    public final TableField<UserRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "생성일");

    /**
     * The column <code>store.user.updated_by</code>. 수정자
     */
    public final TableField<UserRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT.nullable(false), this, "수정자");

    /**
     * The column <code>store.user.updated_time</code>. 수정일
     */
    public final TableField<UserRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "수정일");

    private JUser(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JUser(Name alias, Table<UserRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>store.user</code> table reference
     */
    public JUser(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>store.user</code> table reference
     */
    public JUser(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>store.user</code> table reference
     */
    public JUser() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> JUser(Table<O> path, ForeignKey<O, UserRecord> childPath, InverseForeignKey<O, UserRecord> parentPath) {
        super(path, childPath, parentPath, USER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserPath extends JUser implements Path<UserRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserPath(Table<O> path, ForeignKey<O, UserRecord> childPath, InverseForeignKey<O, UserRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserPath(Name alias, Table<UserRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserPath as(String alias) {
            return new UserPath(DSL.name(alias), this);
        }

        @Override
        public UserPath as(Name alias) {
            return new UserPath(alias, this);
        }

        @Override
        public UserPath as(Table<?> alias) {
            return new UserPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JStore.STORE;
    }

    @Override
    public Identity<UserRecord, Long> getIdentity() {
        return (Identity<UserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_USER_UK_USER_EMAIL, Keys.KEY_USER_UK_USER_ID);
    }

    private transient UserRoleMappingPath _userRoleMapping;

    /**
     * Get the implicit to-many join path to the
     * <code>store.user_role_mapping</code> table
     */
    public UserRoleMappingPath userRoleMapping() {
        if (_userRoleMapping == null)
            _userRoleMapping = new UserRoleMappingPath(this, null, Keys.USER_ROLE_MAPPING_IBFK_1.getInverseKey());

        return _userRoleMapping;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>store.user_role</code> table
     */
    public UserRolePath userRole() {
        return userRoleMapping().userRole();
    }

    @Override
    public JUser as(String alias) {
        return new JUser(DSL.name(alias), this);
    }

    @Override
    public JUser as(Name alias) {
        return new JUser(alias, this);
    }

    @Override
    public JUser as(Table<?> alias) {
        return new JUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUser rename(String name) {
        return new JUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUser rename(Name name) {
        return new JUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUser rename(Table<?> name) {
        return new JUser(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUser where(Condition condition) {
        return new JUser(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUser where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUser where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUser where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUser where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUser where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUser where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUser where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUser whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUser whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
