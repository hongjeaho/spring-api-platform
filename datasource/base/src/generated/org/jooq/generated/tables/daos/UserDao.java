/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JUser;
import org.jooq.generated.tables.pojos.UserEntity;
import org.jooq.generated.tables.records.UserRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, UserEntity, Long> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(JUser.USER, UserEntity.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(JUser.USER, UserEntity.class, configuration);
    }

    @Override
    public Long getId(UserEntity object) {
        return object.getSeq();
    }

    /**
     * Fetch records that have <code>seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfJSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JUser.USER.SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>seq IN (values)</code>
     */
    public List<UserEntity> fetchByJSeq(Long... values) {
        return fetch(JUser.USER.SEQ, values);
    }

    /**
     * Fetch a unique record that has <code>seq = value</code>
     */
    public UserEntity fetchOneByJSeq(Long value) {
        return fetchOne(JUser.USER.SEQ, value);
    }

    /**
     * Fetch a unique record that has <code>seq = value</code>
     */
    public Optional<UserEntity> fetchOptionalByJSeq(Long value) {
        return fetchOptional(JUser.USER.SEQ, value);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfJEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<UserEntity> fetchByJEmail(String... values) {
        return fetch(JUser.USER.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public UserEntity fetchOneByJEmail(String value) {
        return fetchOne(JUser.USER.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<UserEntity> fetchOptionalByJEmail(String value) {
        return fetchOptional(JUser.USER.EMAIL, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<UserEntity> fetchByJName(String... values) {
        return fetch(JUser.USER.NAME, values);
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfJId(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserEntity> fetchByJId(String... values) {
        return fetch(JUser.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserEntity fetchOneByJId(String value) {
        return fetchOne(JUser.USER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<UserEntity> fetchOptionalByJId(String value) {
        return fetchOptional(JUser.USER.ID, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfJPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<UserEntity> fetchByJPassword(String... values) {
        return fetch(JUser.USER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfJCreatedBy(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JUser.USER.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<UserEntity> fetchByJCreatedBy(Long... values) {
        return fetch(JUser.USER.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>created_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfJCreatedTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JUser.USER.CREATED_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_time IN (values)</code>
     */
    public List<UserEntity> fetchByJCreatedTime(LocalDateTime... values) {
        return fetch(JUser.USER.CREATED_TIME, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfJUpdatedBy(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JUser.USER.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<UserEntity> fetchByJUpdatedBy(Long... values) {
        return fetch(JUser.USER.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfJUpdatedTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JUser.USER.UPDATED_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_time IN (values)</code>
     */
    public List<UserEntity> fetchByJUpdatedTime(LocalDateTime... values) {
        return fetch(JUser.USER.UPDATED_TIME, values);
    }
}
